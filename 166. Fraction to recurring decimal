#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if (numerator == 0) return "0";

        string res;
        // sign
        if ((numerator < 0) ^ (denominator < 0)) res.push_back('-');

        // use long long to avoid overflow when taking abs(INT_MIN)
        long long n = numerator;
        long long d = denominator;
        n = (n < 0) ? -n : n;
        d = (d < 0) ? -d : d;

        // integer part
        res += to_string(n / d);
        long long rem = n % d;
        if (rem == 0) return res;

        res.push_back('.');
        unordered_map<long long, int> pos; // remainder -> index in res

        while (rem != 0) {
            if (pos.count(rem)) {
                // insert '(' at first occurrence and append ')'
                res.insert(pos[rem], "(");
                res.push_back(')');
                break;
            }
            pos[rem] = (int)res.size();
            rem *= 10;
            res += to_string(rem / d);
            rem %= d;
        }
        return res;
    }
};

/* // optional local test
int main() {
    Solution s;
    cout << s.fractionToDecimal(1, 2) << "\n";   // "0.5"
    cout << s.fractionToDecimal(2, 1) << "\n";   // "2"
    cout << s.fractionToDecimal(2, 3) << "\n";   // "0.(6)"
    cout << s.fractionToDecimal(-50, 8) << "\n"; // "-6.25"
    cout << s.fractionToDecimal(1, 6) << "\n";   // "0.1(6)"
}
*/

