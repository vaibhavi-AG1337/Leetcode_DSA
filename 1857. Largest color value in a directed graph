class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n = colors.size();
        vector<vector<int>> graph(n);
        vector<int> indegree(n, 0);

        // Build the graph
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            indegree[edge[1]]++;
        }

        // dp[i][c] stores the max count of color c at node i
        vector<vector<int>> dp(n, vector<int>(26, 0));
        queue<int> q;

        // Initialize queue with nodes having indegree 0
        for (int i = 0; i < n; ++i) {
            if (indegree[i] == 0) {
                q.push(i);
                dp[i][colors[i] - 'a'] = 1;
            }
        }

        int visited = 0;
        int result = 0;

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            visited++;

            for (int neighbor : graph[node]) {
                for (int c = 0; c < 26; ++c) {
                    int add = (colors[neighbor] - 'a' == c) ? 1 : 0;
                    dp[neighbor][c] = max(dp[neighbor][c], dp[node][c] + add);
                }
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    q.push(neighbor);
                }
            }

            result = max(result, *max_element(dp[node].begin(), dp[node].end()));
        }

        return (visited == n) ? result : -1; // Check for cycle
    }
};
