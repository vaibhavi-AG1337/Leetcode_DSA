#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        vector<vector<bool>> visited(n, vector<bool>(n,false));
        
        // Min-heap to always expand the smallest elevation reachable
        priority_queue<pair<int,pair<int,int>>, 
                       vector<pair<int,pair<int,int>>>, 
                       greater<pair<int,pair<int,int>>>> pq;
        
        pq.push({grid[0][0], {0,0}});
        visited[0][0] = true;
        int ans = 0;
        
        while(!pq.empty()){
            auto top = pq.top(); pq.pop();
            int h = top.first;
            int x = top.second.first;
            int y = top.second.second;
            
            ans = max(ans, h); // track max elevation along path
            
            if(x == n-1 && y == n-1) return ans;
            
            for(auto &dir : dirs){
                int nx = x + dir[0];
                int ny = y + dir[1];
                
                if(nx>=0 && nx<n && ny>=0 && ny<n && !visited[nx][ny]){
                    visited[nx][ny] = true;
                    pq.push({grid[nx][ny], {nx,ny}});
                }
            }
        }
        
        return ans; // should never reach here
    }
};
